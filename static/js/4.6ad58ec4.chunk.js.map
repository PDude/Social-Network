{"version":3,"sources":["assets/images/cover_img.jfif","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","profile","className","style","post_item","img_text_wrap","img_wrap","src","photos","small","userPhoto","alt","post_text_img_wrap","imgPath","post_img_wrap","message","btns_social","like_btn","likesCount","share_btn","sharesCount","Preloader","maxLength300","maxLengthCreator","PostReduxForm","reduxForm","form","onSubmit","handleSubmit","form_post","post_form_textarea","Field","name","placeholder","component","Textarea","validate","requiredFiled","MyPosts","postsElements","postsData","map","post","id","key","posts","values","addPost","posts_wrap","MyPostsContainer","this","React","Component","compose","connect","state","profilePage","ProfileStatusHooks","useState","editMode","setEditMode","status","setStatus","useEffect","status_section","autoFocus","onFocus","event","target","select","onChange","e","currentTarget","value","onBlur","updateStatus","status_input","onDoubleClick","status_text","ProfileInfo","isOwner","savePhoto","socialMedia","facebook","website","vk","twitter","instagram","youtube","github","mainLink","socialMediaLinks","Object","keys","link","contacts","href","rel","avatar_info","cover_img","backgroundImage","large","coverPhoto","Container","avatar_jobStatus","avatar_wrap","type","files","length","htmlFor","lookingForAJob","looking_job","title","dont_looking_job","profile_desc","fullName","social_media","Profile","ProfileContainer","settingProfileCondition","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","componentDidMount","componentDidUpdate","prevProps","prevState","auth","withRouter","withAuthRedirect"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,wC,oBCC3CD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,eAAiB,oCAAoC,aAAe,kCAAkC,YAAc,iCAAiC,aAAe,kCAAkC,UAAY,+BAA+B,aAAe,kCAAkC,iBAAmB,sCAAsC,YAAc,iCAAiC,iBAAmB,wC,oBCA9dD,EAAOC,QAAU,CAAC,MAAQ,uBAAuB,UAAY,2BAA2B,mBAAqB,oCAAoC,WAAa,8B,oBCA9JD,EAAOC,QAAU,CAAC,SAAW,uBAAuB,UAAY,wBAAwB,cAAgB,4BAA4B,cAAgB,4BAA4B,mBAAqB,iCAAiC,YAAc,0BAA0B,SAAW,yB,gNCuC1QC,EAnCF,SAACC,GAEV,OAAKA,EAAMC,QAGP,yBAAKC,UAAWC,IAAMC,WAClB,yBAAKF,UAAWC,IAAME,eAClB,yBAAKH,UAAWC,IAAMG,UAClB,yBAAKC,IAAmC,MAA9BP,EAAMC,QAAQO,OAAOC,MACzBT,EAAMC,QAAQO,OAAOC,MACrBC,IAAWC,IAAI,MAEzB,yBAAKT,UAAWC,IAAMS,oBACA,MAAjBZ,EAAMa,QACD,yBAAKX,UAAWC,IAAMW,eACpB,yBAAKP,IAAKP,EAAMa,QAASF,IAAI,MAE/B,KACN,2BACKX,EAAMe,WAInB,yBAAKb,UAAWC,IAAMa,aAClB,4BAAQd,UAAWC,IAAMc,UAAzB,eACM,6BAAMjB,EAAMkB,aAElB,4BAAQhB,UAAWC,IAAMgB,WAAzB,eACM,6BAAMnB,EAAMoB,gBA1BH,kBAACC,EAAA,EAAD,OCAzBC,EAAeC,YAAiB,KAgBhCC,EAAgBC,YAAU,CAAEC,KAAM,mBAAlBD,EAdL,SAACzB,GACd,OACI,0BAAM2B,SAAU3B,EAAM4B,aAAc1B,UAAWC,IAAM0B,WACjD,yBAAK3B,UAAWC,IAAM2B,oBAClB,kBAACC,EAAA,EAAD,CAAOC,KAAM,OAAQC,YAAY,oBAAoBC,UAAWC,IAC5DC,SAAU,CAACC,IAAef,MAElC,oDAuCGgB,EA9BC,SAACtC,GAKb,IAAIuC,EAAgBvC,EAAMwC,UAAUC,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAC5CC,GAAID,EAAKC,GACTC,IAAKF,EAAKC,GACVzB,WAAYwB,EAAKxB,WACjBE,YAAasB,EAAKtB,YAClBL,QAAS2B,EAAK3B,QACdF,QAAS6B,EAAK7B,QACdZ,QAASD,EAAMC,aAOnB,OACI,yBAAKC,UAAWC,IAAM0C,OAClB,kBAACrB,EAAD,CAAeG,SANL,SAACmB,GACf9C,EAAM+C,QAAQD,EAAOJ,SAMjB,6BACA,yBAAKxC,UAAWC,IAAM6C,YACjBT,K,gBC3CXU,E,uKAEE,OAAO,kBAAC,EAAYC,KAAKlD,W,GAFFmD,IAAMC,WAWtBC,cACXC,aANkB,SAACC,GAAD,MAAY,CAC9Bf,UAAWe,EAAMC,YAAYhB,UAC7BvC,QAASsD,EAAMC,YAAYvD,WAIF,CAAE8C,cADhBM,CAEbJ,G,+DCmBaQ,EAjCY,SAACzD,GACxB,IADkC,EAIJ0D,oBAAS,GAJL,mBAI7BC,EAJ6B,KAInBC,EAJmB,OAKRF,mBAAS1D,EAAM6D,QALP,mBAK7BA,EAL6B,KAKrBC,EALqB,KAOlCC,qBAAU,WACND,EAAU9D,EAAM6D,UACjB,CAAC7D,EAAM6D,SAeV,OACI,yBAAK3D,UAAWC,IAAM6D,gBACjBL,EACK,2BAAOM,WAAS,EAACC,QAzBb,SAACC,GAAD,OAAWA,EAAMC,OAAOC,UAyBWC,SAP9B,SAACC,GACpBT,EAAUS,EAAEC,cAAcC,QAMiDA,MAAOZ,EAAQa,OAZ3E,WACfd,GAAY,GACZ5D,EAAM2E,aAAad,IAU2F3D,UAAWC,IAAMyE,eACrH,uBAAGC,cAjBE,WACfjB,GAAY,IAgB4B1D,UAAWC,IAAM2E,aAAc9E,EAAM6D,QA3BnE,6BCqEHkB,EAjEK,SAAC,GAA2D,IAAzD9E,EAAwD,EAAxDA,QAAS4D,EAA+C,EAA/CA,OAAQc,EAAuC,EAAvCA,aAAcK,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAE3D,IAAKhF,EAAS,OAAO,kBAACoB,EAAA,EAAD,MAErB,IAAI6D,EAAc,CACdC,SAAU,kBAAC,IAAD,MACVC,QAAS,kBAAC,IAAD,MACTC,GAAI,kBAAC,IAAD,MACJC,QAAS,kBAAC,IAAD,MACTC,UAAW,kBAAC,IAAD,MACXC,QAAS,kBAAC,IAAD,MACTC,OAAQ,kBAAC,IAAD,MACRC,SAAU,kBAAC,IAAD,OAGVC,EAAmBC,OAAOC,KAAKX,GAAazC,KAAI,SAAAqD,GAChD,IAAIC,EAAW9F,EAAQ8F,SACvB,OAAyB,MAAlBA,EAASD,GACV,uBAAGlD,IAAKkD,EAAME,KAAMD,EAASD,GAAOG,IAAI,sBAAsB7B,OAAO,UAAUc,EAAYY,IAC3F,QAWV,OACI,yBAAK5F,UAAWC,IAAM+F,aAClB,yBAAKhG,UAAWC,IAAMgG,UAAWhG,MAAO,CAAEiG,gBAAgB,OAAD,OAASnG,EAAQO,OAAO6F,OAASC,IAAjC,QACzD,kBAACC,EAAA,EAAD,KACI,yBAAKrG,UAAWC,IAAMqG,kBAClB,yBAAKtG,UAAWC,IAAMsG,aACjBzB,GAAW,oCACR,2BAAOrC,GAAI,mBAAoB+D,KAAK,OAAOpC,SAfvC,SAACC,GACrBA,EAAEH,OAAOuC,MAAMC,QAAQ3B,EAAUV,EAAEH,OAAOuC,MAAM,OAehC,2BAAOE,QAAS,sBAEpB,yBAAKtG,IAAKN,EAAQO,OAAOC,OAASC,IAAWC,IAAI,MAEpDV,EAAQ6G,eACH,0BAAM5G,UAAWC,IAAM4G,YAAaC,MAAM,2BAA0B,kBAAC,IAAD,OACpE,0BAAM9G,UAAWC,IAAM8G,iBAAkBD,MAAM,+BAA8B,kBAAC,IAAD,QAGvF,yBAAK9G,UAAWC,IAAM+G,cAClB,4BAEKjH,EAAQkH,UAIb,kBAAC,EAAD,CAAoBtD,OAAQA,EAAQc,aAAcA,IAElD,yBAAKzE,UAAWC,IAAMiH,cACjBzB,OCnDV0B,EAXC,SAACrH,GACb,OACI,oCACI,kBAAC,EAAD,CAAaiF,UAAWjF,EAAMiF,UAAWD,QAAShF,EAAMgF,QAAS/E,QAASD,EAAMC,QAAS4D,OAAQ7D,EAAM6D,OAAQc,aAAc3E,EAAM2E,eACnI,kBAAC4B,EAAA,EAAD,KACI,kBAAC,EAAD,S,gBCFVe,E,4MAgCFC,wBAA0B,WACtB,IAAIC,EAAS,EAAKxH,MAAMyH,MAAMC,OAAOF,OAChCA,IACDA,EAAS,EAAKxH,MAAM2H,mBAEhB,EAAK3H,MAAM4H,QAAQC,KAAK,UAIhC,EAAK7H,MAAM8H,eAAeN,GAC1B,EAAKxH,MAAM+H,UAAUP,I,EAGzBQ,kBAAoB,WAChB,EAAKT,2B,EAGTU,mBAAqB,SAACC,EAAWC,GACzB,EAAKnI,MAAMyH,MAAMC,OAAOF,QAAUU,EAAUT,MAAMC,OAAOF,QACzD,EAAKD,2B,uDAKT,OAAO,kBAAC,EAAD,iBAAarE,KAAKlD,MAAlB,CACHgF,SAAU9B,KAAKlD,MAAMyH,MAAMC,OAAOF,OAClCvH,QAASiD,KAAKlD,MAAMC,QACpB4D,OAAQX,KAAKlD,MAAM6D,OACnBc,aAAczB,KAAKlD,MAAM2E,aACzBM,UAAW/B,KAAKlD,MAAMiF,iB,GA7DH9B,IAAMC,WAuEtBC,sBACXC,aAPkB,SAACC,GAAD,MAAY,CAC9BtD,QAASsD,EAAMC,YAAYvD,QAC3B4D,OAAQN,EAAMC,YAAYK,OAC1B8D,iBAAkBpE,EAAM6E,KAAKZ,UAIJ,CAAEM,mBAAgBC,cAAWpD,iBAAcM,gBACpEoD,IACAC,IAHWjF,CAIbiE","file":"static/js/4.6ad58ec4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cover_img.7618a1c6.jfif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar_wrap\":\"ProfileInfo_avatar_wrap__ZfZ-0\",\"status_section\":\"ProfileInfo_status_section__1QnDR\",\"status_input\":\"ProfileInfo_status_input__19Uc4\",\"status_text\":\"ProfileInfo_status_text__37PMA\",\"profile_desc\":\"ProfileInfo_profile_desc__197UF\",\"cover_img\":\"ProfileInfo_cover_img__3vh4P\",\"social_media\":\"ProfileInfo_social_media__1MAyk\",\"avatar_jobStatus\":\"ProfileInfo_avatar_jobStatus__ByLpW\",\"looking_job\":\"ProfileInfo_looking_job__1OM4Z\",\"dont_looking_job\":\"ProfileInfo_dont_looking_job__3D-q1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3tZ1c\",\"form_post\":\"MyPosts_form_post__Y8C2p\",\"post_form_textarea\":\"MyPosts_post_form_textarea__3lXQy\",\"posts_wrap\":\"MyPosts_posts_wrap__emomV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img_wrap\":\"Post_img_wrap__3tUQL\",\"post_item\":\"Post_post_item__3Uhi2\",\"img_text_wrap\":\"Post_img_text_wrap__3-E4v\",\"post_img_wrap\":\"Post_post_img_wrap__3WkDn\",\"post_text_img_wrap\":\"Post_post_text_img_wrap__skWEc\",\"btns_social\":\"Post_btns_social__3BOst\",\"like_btn\":\"Post_like_btn___kd4n\"};","import React from 'react'\nimport userPhoto from '../../../../assets/images/profile_img_plug.jpg'\nimport Preloader from '../../../common/Preloader/Preloader'\nimport style from './Post.module.css'\n\nconst Post = (props) => {\n\n    if (!props.profile) return <Preloader />\n\n    return (\n        <div className={style.post_item}>\n            <div className={style.img_text_wrap}>\n                <div className={style.img_wrap}>\n                    <img src={props.profile.photos.small != null\n                        ? props.profile.photos.small\n                        : userPhoto} alt='' />\n                </div>\n                <div className={style.post_text_img_wrap}>\n                    {props.imgPath != null\n                        ? <div className={style.post_img_wrap}>\n                            <img src={props.imgPath} alt=\"\" />\n                        </div>\n                        : null}\n                    <p>\n                        {props.message}\n                    </p>\n                </div>\n            </div>\n            <div className={style.btns_social}>\n                <button className={style.like_btn}>\n                    üëç<sup>{props.likesCount}</sup>\n                </button>\n                <button className={style.share_btn}>\n                    üîó<sup>{props.sharesCount}</sup>\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Post","import React from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport { maxLengthCreator, requiredFiled } from '../../../utils/validators/validators'\nimport { Textarea } from '../../common/FormElements/FormElements'\nimport style from './MyPosts.module.css'\nimport Post from './Post/Post'\n\nconst maxLength300 = maxLengthCreator(300)\n\nconst PostForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit} className={style.form_post}>\n            <div className={style.post_form_textarea}>\n                <Field name={'post'} placeholder='Make some post ..' component={Textarea}\n                    validate={[requiredFiled, maxLength300]} />\n            </div>\n            <button>\n                Post! ‚úà\n            </button>\n        </form>\n    )\n}\n\nconst PostReduxForm = reduxForm({ form: 'profilePostForm' })(PostForm)\n\nconst MyPosts = (props) => {\n    // shouldComponentUpdate(nextProps, nextState) {\n    //     return nextProps != props || nextState != state\n    // }   \n\n    let postsElements = props.postsData.map(post => <Post\n        id={post.id}\n        key={post.id}\n        likesCount={post.likesCount}\n        sharesCount={post.sharesCount}\n        message={post.message}\n        imgPath={post.imgPath}\n        profile={props.profile}\n    />)\n\n    const onAddPost = (values) => {\n        props.addPost(values.post)\n    }\n\n    return (\n        <div className={style.posts}>\n            <PostReduxForm onSubmit={onAddPost} />\n            <hr />\n            <div className={style.posts_wrap}>\n                {postsElements}\n            </div>\n        </div >\n    )\n}\n\nexport default MyPosts\n\n","import React from 'react'\nimport { addPost } from '../../../redux/profileReducer'\nimport MyPosts from './MyPosts'\nimport { connect } from 'react-redux'\nimport { compose } from 'redux'\n\nclass MyPostsContainer extends React.Component {\n    render() {\n        return <MyPosts {...this.props} />\n    }\n}\n\nlet mapStateToProps = (state) => ({\n    postsData: state.profilePage.postsData,\n    profile: state.profilePage.profile\n})\n\nexport default compose(\n    connect(mapStateToProps, { addPost })\n)(MyPostsContainer)","import React from 'react'\nimport { useEffect } from 'react'\nimport { useState } from 'react'\nimport style from './ProfileInfo.module.css'\n\nconst ProfileStatusHooks = (props) => {\n    let statusPlug = `I'm Social Network Part`\n    let handleFocus = (event) => event.target.select()\n\n    let [editMode, setEditMode] = useState(false)\n    let [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const editModeOn = () => {\n        setEditMode(true)\n    }\n\n    const editModeOf = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div className={style.status_section}>\n            {editMode\n                ? <input autoFocus onFocus={handleFocus} onChange={onStatusChange} value={status} onBlur={editModeOf} className={style.status_input} />\n                : <p onDoubleClick={editModeOn} className={style.status_text}>{props.status || statusPlug}</p>}\n        </div>\n    )\n}\n\nexport default ProfileStatusHooks","import React, { useState, useEffect } from 'react'\nimport Container from '../../common/Container/Container'\nimport Preloader from '../../common/Preloader/Preloader'\nimport style from './ProfileInfo.module.css'\nimport userPhoto from '../../../assets/images/profile_img_plug.jpg'\nimport coverPhoto from '../../../assets/images/cover_img.jfif'\nimport { FaFacebookSquare, FaExternalLinkSquareAlt, FaVk, FaTwitterSquare, FaInstagramSquare, FaYoutubeSquare, FaGithubSquare, FaLink } from 'react-icons/fa'\nimport { ImBookmark } from 'react-icons/im'\nimport ProfileStatusHooks from './ProfileStatusHooks'\n\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto }) => {\n\n    if (!profile) return <Preloader />\n\n    let socialMedia = {\n        facebook: <FaFacebookSquare />,\n        website: <FaExternalLinkSquareAlt />,\n        vk: <FaVk />,\n        twitter: <FaTwitterSquare />,\n        instagram: <FaInstagramSquare />,\n        youtube: <FaYoutubeSquare />,\n        github: <FaGithubSquare />,\n        mainLink: <FaLink />\n    }\n\n    let socialMediaLinks = Object.keys(socialMedia).map(link => {\n        let contacts = profile.contacts\n        return contacts[link] != null\n            ? <a key={link} href={contacts[link]} rel='noopener noreferrer' target='_blank'>{socialMedia[link]}</a>\n            : null\n    })\n\n    const onMainPhotoSelected = (e) => {\n        if (e.target.files.length) savePhoto(e.target.files[0])\n    }\n\n    // !\n    // Page doesn't re-render after uploading file (photo)\n    // !\n\n    return (\n        <div className={style.avatar_info}>\n            <div className={style.cover_img} style={{ backgroundImage: `url(${profile.photos.large || coverPhoto})` }} />\n            <Container>\n                <div className={style.avatar_jobStatus}>\n                    <div className={style.avatar_wrap}>\n                        {isOwner && <>\n                            <input id={'file_profile_img'} type='file' onChange={onMainPhotoSelected} />\n                            <label htmlFor={'file_profile_img'} />\n                        </>}\n                        <img src={profile.photos.small || userPhoto} alt='' />\n                    </div>\n                    {profile.lookingForAJob\n                        ? <span className={style.looking_job} title='I Am Looking For A Job '><ImBookmark /></span>\n                        : <span className={style.dont_looking_job} title='I Am Not Looking For A Job '><ImBookmark /></span>\n                    }\n                </div>\n                <div className={style.profile_desc}>\n                    <h2>\n                        {/* Ashley Bennett */}\n                        {profile.fullName}\n                    </h2>\n                    {/* 20 y. o. | Christian ‚úùÔ∏è & Musician üéπ */}\n\n                    <ProfileStatusHooks status={status} updateStatus={updateStatus} />\n\n                    <div className={style.social_media}>\n                        {socialMediaLinks}\n                    </div>\n                </div>\n            </Container>\n        </div>\n    )\n}\n\nexport default ProfileInfo","import React from 'react'\nimport Container from '../common/Container/Container'\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\n\nconst Profile = (props) => {\n    return (\n        <>\n            <ProfileInfo savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\n            <Container>\n                <MyPostsContainer />\n            </Container>\n        </>\n    )\n}\n\nexport default Profile","import React from 'react'\nimport Profile from './Profile'\nimport { getUserProfile, getStatus, updateStatus, savePhoto } from '../../redux/profileReducer'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport { compose } from 'redux'\nimport { withAuthRedirect } from '../../hoc/WithAuth/withAuthRedirect'\n\nclass ProfileContainer extends React.Component {\n    // constructor(props) {\n    //     super(props)\n    // }\n\n    // refreshProfile() {\n    //     let userId =+ this.props.match.params.userId\n    //     if (!userId) {\n    //         userId = this.props.authorizedUserId;\n    //         if (!userId) {\n    //             this.props.history.push('/login')\n    //         }\n    //     }\n\n    //     if (!userId) {\n    //         console.error(\"ID should exists in URI params or in state ('authorizedUserId')\")\n    //     } else {\n    //         this.props.getUserProfile(userId)\n    //         this.props.getStatus(userId)\n    //     }\n    // }\n\n    // componentDidMount() {\n    //     this.refreshProfile()\n    // }\n\n    // componentDidUpdate(prevProps, prevState) {\n    //     if (this.props.match.params.userId != prevProps.match.params.userId) {\n    //         this.refreshProfile()\n    //     }\n    // }\n\n    settingProfileCondition = () => {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId\n            if (!userId) {\n                this.props.history.push('/login')\n            }\n        }\n\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n    }\n\n    componentDidMount = () => {\n        this.settingProfileCondition()\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\n            this.settingProfileCondition()\n        }\n    }\n\n    render() {\n        return <Profile {...this.props}\n            isOwner={!this.props.match.params.userId}\n            profile={this.props.profile}\n            status={this.props.status}\n            updateStatus={this.props.updateStatus}\n            savePhoto={this.props.savePhoto} />\n    }\n}\n\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId\n})\n\nexport default compose(\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto }),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)"],"sourceRoot":""}